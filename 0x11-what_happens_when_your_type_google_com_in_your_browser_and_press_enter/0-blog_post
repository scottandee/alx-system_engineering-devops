From Click to Content: What Happens When you Type google.com in your Browser and Hit Enter
Do you ever pause to ponder the intricacies concealed beneath the surface of a seemingly straightforward task—like loading a webpage? Do you ever wonder what happens when you type a web address into your browser and hit enter? The remarkable fluidity and speed of the internet often veil the elaborate layers of abstraction that orchestrate this process. In this post, we embark on a journey to peel back these layers, revealing the inner workings that bring a webpage to life. Step by step, we'll unravel the stages and unveil the steps involved in the seemingly effortless act of loading a webpage. 

The web, at its core, revolves around two essential participants: servers and clients. Servers play the pivotal role of hosting websites, while clients, often in the form of web browsers, request and retrieve data via the vast expanse of the internet —representing the crucial link between server and client. Much like an elaborate dance, this interaction follows the principles of layered communication, ensuring a seamless exchange of information.
Let’s now investigate the anatomy of the URL (Uniform Resource Locator) we’re typing: https://www.google.com. The first important component, https, indicates the chosen communication protocol. “www” indicates our intention to access a webpage while “google.com” is the domain name hosting the desired content. Now, let's peel back the layers and journey into the heart of this intricate process. 

Client Side: DNS Resolution, HTTP, HTTPS
DNS Resolution, the very first step, sets the stage for our expedition. DNS, standing for Domain Name System, operates as a global address book of the internet and is pretty similar to the phone book that exists on your mobile phone. It stores records, pairing domain names with their corresponding IP addresses. You see, while humans find it intuitive to remember domain names like 'google.com,' the underlying communication mechanisms of the internet, such as IP routing, rely on numerical IP addresses. DNS steps in, bridging this gap between human-friendly domain names and the IP addresses that power the internet. In this case, when the DNS is queried for the domain name, google.com, it’ll return 8.8.8.8 which is Google’s primary IP address.

In the realm of web communication, protocols are fundamental. They represent a set of essential instructions that govern internet communication. HTTP (Hyper Text Transfer Protocol) stands as the bedrock of data exchange on the web, enabling your browser to fetch a webpage from a server. Each protocol is associated with a specific port, essentially indicating the type of service being accessed on the internet. For HTTP, this port is 80. Conversely, HTTPS, denoted by port 443, serves as the secure sibling of HTTP. Through encryption, symbolized by the appended 'S' for 'Secure', HTTPS fortifies the exchanged data between client and server, fundamentally elevating a standard HTTP connection into a secure and protected one. This encryption is particularly crucial, especially when sensitive information like passwords or credit card details is being transmitted.

When we initiate an HTTPS connection by typing it into the browser, we signal our intent for secure communication over the internet. The browser, in response, requests the SSL certificate from the server at the specified IP address, in this case, 8.8.8.8. Once provided, the browser meticulously checks this certificate against a list of trusted Certificate Authorities (CAs) to validate its authenticity. In this case, it’ll verify that 8.8.8.8 is actually Google’s server IP. This verification leads to the HTTPS handshake, where both the server and the client agree on a secure communication style. This then makes up the application later of layered communication.

Transportation: TCP/IP
The journey continues as the browser proceeds to make an HTTP request. The question arises: how is this request conveyed to the server? The answer lies in TCP/IP, a fundamental protocol for data transmission across the internet. This protocol is at the heart of layered communication. TCP (Transmission Control Protocol) is tasked with dividing data into manageable packets and numbering them for efficient transmission. Simultaneously, IP (Internet Protocol) takes on the responsibility of routing these packets to the intended server. In our scenario, the browser initiates a TCP connection to the server at the IP address 8.8.8.8 on port 443. Once this connection is successfully established, data is encapsulated into packets and transmitted bit by bit over the vast internet. 

Server Side: Load Balancer, Web and Application Server, firewall, SSL
On the server side, the infrastructure exhibits a variety of configurations. In this particular setup, we're spotlighting a specific arrangement: it comprises a Load Balancer , two web servers, two application servers, databases, SSL implementation at the load balancer, and firewalls guarding each of the three servers. If these terms are unfamiliar to you, here are some explanations:
    • Load Balancer: This tool efficiently distributes web traffic among all available web servers.
    • Firewalls: Security barriers that analyze and filter incoming and outgoing web traffic based on predetermined security rules
    • SSL Certificate: A certificate received from a trusted certificate authority that confirms your identity.
    • Web Server: Utilized for serving static content, primarily listening to HTTP requests and providing responses based on programmed configurations.
    • Application Server: Used to serve dynamic content.
    • Database: this is simply an organized collection of data.
Once the information arrives at the load balancer, it then relays the HTTP request to one of the web servers. The web servers meticulously scan through the request and promptly provide a response, which is then dispatched to the client that initiated the HTTP request through the same medium used to transmit the http request. In cases where the requested content involves dynamic elements, a servlet is dispatched to the application server for that specific data. The application server, in turn, queries the database to fetch the required information. Subsequently, the requested data is sent back to the awaiting client, seamlessly integrated into the static content.
And there you have it! google.com loaded up on your browser. So, the next time you load a webpage, take a moment to ponder the marvels beneath, a world of innovation that makes the internet not just a vast network, but a fascinating journey into the heart of technology.
